{"version":3,"file":"index-d97bf1b8.js","sources":["../../../src/ui/Accordion/context.ts","../../../src/ui/Accordion/AccordionGroup.tsx","../../../src/ui/Accordion/index.tsx"],"sourcesContent":["import React from 'react';\n\nimport { noop } from '../../utils/utils';\n\ninterface ContextValue {\n  setOpened(accordion: string): void;\n  opened: string;\n}\n\nconst Context = React.createContext<ContextValue>({\n  opened: '', // mock default value\n  setOpened: noop,\n});\n\nexport const Consumer = Context.Consumer;\nexport const Provider = Context.Provider;\n","// Wraps all the accordions in an accordion set\n// keep one accordion open at a time\nimport React, { ReactElement, useState } from 'react';\n\nimport { Provider } from './context';\n\ninterface Props {\n  children: Array<ReactElement> | ReactElement;\n  defaultOpened?: string;\n  className?: string;\n}\n\nexport default function AccordionGroup({\n  children,\n  className = '',\n}: Props): ReactElement {\n  const [opened, setOpened] = useState('');\n  return (\n    <Provider value={{ opened, setOpened }}>\n      <div className={className}>{ children }</div>\n    </Provider>\n  )\n}\n","import React, { ReactElement, useState } from 'react';\n\nimport './index.scss';\n\nimport Icon, { IconTypes } from '../Icon';\nimport AccordionGroup_ from './AccordionGroup';\nimport { Consumer } from './context';\n\ninterface Props {\n  className?: string | Array<string>;\n  id: string;\n  renderTitle(): ReactElement;\n  renderContent(): ReactElement;\n  renderFooter?(): ReactElement;\n}\n\nexport default function Accordion({\n  className,\n  id,\n  renderTitle,\n  renderContent,\n  renderFooter,\n}: Props): ReactElement {\n  const [showAccordion, setShowAccordion] = useState(false);\n  return (\n    <Consumer>\n      {\n        // Function is considered like a react component\n        (value) => {\n          const { opened, setOpened } = value; // props from Provider\n          if (id === opened) {\n            setShowAccordion(true);\n          } else {\n            setShowAccordion(false);\n          }\n          const handleClick = () => {\n            if (showAccordion) {\n              setOpened('');\n            } else {\n              setOpened(id);\n            }\n          }\n          return (\n            <>\n              <div\n                className={[\n                  ...(Array.isArray(className) ? className : [className]),\n                  'sendbird-accordion__panel-header',\n                ].join(' ')}\n                id={id}\n                role=\"switch\"\n                aria-checked={false}\n                onClick={handleClick}\n                onKeyDown={handleClick}\n                tabIndex={0}\n              >\n                { renderTitle() }\n                <Icon\n                  type={IconTypes.CHEVRON_RIGHT}\n                  className={[\n                    'sendbird-accordion__panel-icon-right',\n                    'sendbird-accordion__panel-icon--chevron',\n                    (showAccordion ? 'sendbird-accordion__panel-icon--open' : ''),\n                  ].join(' ')}\n                  height=\"24px\"\n                  width=\"24px\"\n                />\n              </div>\n              {\n                showAccordion && (\n                  <div className=\"sendbird-accordion\">\n                    <div className=\"sendbird-accordion__list\">\n                      { renderContent() }\n                    </div>\n                    {\n                      renderFooter && (\n                        <div className=\"sendbird-accordion__footer\">\n                          { renderFooter() }\n                        </div>\n                      )\n                    }\n                  </div>\n                )\n              }\n            </>);\n        }\n      }\n    </Consumer>\n  )\n}\n\nexport const AccordionGroup = AccordionGroup_;\n"],"names":["Context","React","createContext","opened","setOpened","noop","Consumer","Provider","AccordionGroup","_a","children","_b","className","_c","useState","Accordion","id","renderTitle","renderContent","renderFooter","showAccordion","setShowAccordion","value","handleClick","__spreadArray","Array","isArray","join","Icon","IconTypes","CHEVRON_RIGHT","AccordionGroup_"],"mappings":";;;;;;;;;;;AASA,IAAMA,OAAO,gBAAGC,yBAAK,CAACC,aAAN,CAAkC;AAChDC,EAAAA,MAAM,EAAE,EADwC;AAEhDC,EAAAA,SAAS,EAAEC;AAFqC,CAAlC,CAAhB;AAKO,IAAMC,QAAQ,GAAGN,OAAO,CAACM,QAAzB;AACA,IAAMC,QAAQ,GAAGP,OAAO,CAACO,QAAzB;;ACfP;SAYwBC,iBAAeC;MACrCC,QAAQ;MACRC;MAAAC,SAAS,mBAAG;;AAEN,MAAAC,KAAsBC,cAAQ,CAAC,EAAD,CAA9B;AAAA,MAACX,MAAM,QAAP;AAAA,MAASC,SAAS,QAAlB;;AACN,sBACEH,wCAAC,QAAD;AAAU,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,QAAR;AAAUC,MAAAA,SAAS;AAAnB;AAAjB,kBACEH;AAAK,IAAA,SAAS,EAAEW;AAAhB,KAA6BF,QAA7B,CADF,CADF;AAKD;;SCNuBK,UAAUN;MAChCG,SAAS;MACTI,EAAE;MACFC,WAAW;MACXC,aAAa;MACbC,YAAY;;AAEN,MAAAR,KAAoCG,cAAQ,CAAC,KAAD,CAA5C;AAAA,MAACM,aAAa,QAAd;AAAA,MAAgBC,gBAAgB,QAAhC;;AACN,sBACEpB,wCAAC,QAAD;AAGI,YAACqB,KAAD;AACU,QAAAnB,MAAM,GAAgBmB,KAAK,OAA3B;AAAA,QAAQlB,SAAS,GAAKkB,KAAK,UAA3B;;AACR,QAAIN,EAAE,KAAKb,MAAX,EAAmB;AACjBkB,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KAFD,MAEO;AACLA,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;;AACD,QAAME,WAAW,GAAG,SAAdA,WAAc;AAClB,UAAIH,aAAJ,EAAmB;AACjBhB,QAAAA,SAAS,CAAC,EAAD,CAAT;AACD,OAFD,MAEO;AACLA,QAAAA,SAAS,CAACY,EAAD,CAAT;AACD;AACF,KAND;;AAOA,wBACEf,+FACEA;AACE,MAAA,SAAS,EAAEuB,wEACLC,KAAK,CAACC,OAAN,CAAcd,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,WAC3C,2CAFS,CAGTe,IAHS,CAGJ,GAHI,CADb;AAKE,MAAA,EAAE,EAAEX,EALN;AAME,MAAA,IAAI,EAAC,QANP;AAOE,sBAAc,KAPhB;AAQE,MAAA,OAAO,EAAEO,WARX;AASE,MAAA,SAAS,EAAEA,WATb;AAUE,MAAA,QAAQ,EAAE;AAVZ,OAYIN,WAAW,EAZf,eAaEhB,wCAAC2B,YAAD;AACE,MAAA,IAAI,EAAEC,iBAAS,CAACC,aADlB;AAEE,MAAA,SAAS,EAAE,CACT,sCADS,EAET,yCAFS,EAGRV,aAAa,GAAG,sCAAH,GAA4C,EAHjD,EAITO,IAJS,CAIJ,GAJI,CAFb;AAOE,MAAA,MAAM,EAAC,MAPT;AAQE,MAAA,KAAK,EAAC;AARR,MAbF,CADF,EA0BIP,aAAa,iBACXnB;AAAK,MAAA,SAAS,EAAC;AAAf,oBACEA;AAAK,MAAA,SAAS,EAAC;AAAf,OACIiB,aAAa,EADjB,CADF,EAKIC,YAAY,iBACVlB;AAAK,MAAA,SAAS,EAAC;AAAf,OACIkB,YAAY,EADhB,CANN,CA3BN,CADF;AA2CD,GA5DL,CADF;AAiED;IAEYX,cAAc,GAAGuB;;;;;"}